<%= form_for(study_file, url: update_study_file_study_path(@study._id), html: {id: "expression_form", class: 'initialize_expression_form', remote: true}) do |f| %>
	<%= f.hidden_field :study_id, value: params[:id] %>
	<div class="form-group row">
		<div class="col-sm-4">
			<%= f.label :name %><br />
			<%= f.text_field :name, class: 'form-control filename', readonly: true, placeholder: 'Filename is taken from uploaded file...' %>
		</div>
		<div class="col-sm-8">
			<%= f.label :description %><br />
			<%= f.text_field :description, class: 'form-control' %>
		</div>
	</div>
	<div class="form-group row">
		<div class="col-sm-4">
			<%= f.label :file_type %><br />
			<%= f.text_field :file_type, readonly: true, class: 'form-control' %>
		</div>
		<div class="col-sm-5 upload-field">
			<%= f.label :upload, 'Upload Data File' %><br />
			<%= f.file_field :upload, class: 'btn btn-info fileinput-button' %>
			<%= f.hidden_field :status, value: 'uploading' %>
		</div>
		<div class="col-sm-3">
			<%= f.label :actions %>
			<div class="row">
				<div class="col-xs-6">
					<%= f.submit 'Save', class: 'btn btn-block btn-success save-study-file', disabled: study_file.upload_file_name.nil? %>
				</div>
				<div class="col-xs-6">
					<%= link_to 'Delete', delete_study_file_study_path(@study._id, study_file._id, target: '#expression_form'), method: :delete, class: 'btn btn-block btn-danger delete-file', disabled: study_file.upload_file_name.nil?, data: {remote: true} %>
				</div>
			</div>
		</div>
	</div>
	<div class="form-group upload-progress">
		<table class="table table-condensed">
			<tbody class="files"></tbody>
		</table>
	</div>
	<% if !study_file.upload_file_name.nil? %>
		<p><label>Link to file </label><br /><%= render partial: '/layouts/download_link', locals: {study: @study, study_file: study_file} %></p>
	<% end %>

	<script type="text/javascript">

		$(function() {
			// check if upload has already happened
			if (<%= !study_file.upload_file_name.nil? %>) {
				completeWizardStep();
			}

			$('#expression_form').fileupload({
				url: "<%= upload_study_path(@study._id) %>",
				maxChunkSize: 10000000, // 10 MB
				type: 'PATCH',
				acceptFileTypes: /(\.|\/)(txt|text)$/i,
				add: function (e, data) {
					fileUploading = true;
					var that = this;
					var fileName = data.files[0].name.replace(/ /g, '_');
					// this is the chunked upload callback, will upload 10MB at a time until finished
					$.getJSON("<%= resume_upload_study_path %>", { file: fileName }, function (result) {
						var file = result.file;
						data.uploadedBytes = file && file.size;
						$.blueimp.fileupload.prototype.options.add.call(that, e, data);
					});
				},
				// on each chunk completion, update status
				chunkdone: function(e, data) {
					var perc = parseInt(data.loaded / data.total * 100, 10);
					$(data.context).find('h1').html(perc + "% uploaded");
				},
				// file upload is done, now clean up
				done: function(e, data) {
					var fileName = data.files[0].name.replace(/ /g, '_');
					// update upload status
					$.ajax({
						url: "<%= update_status_study_path %>",
						type: "PATCH",
						data: { status: 'uploaded', file: fileName}
					});
					fileUploading = false;
					$.post("<%= parse_study_file_study_path(@study._id) %>", {file: fileName, modal_target: '#expression-parse-modal', partial: 'initialize_expression_form', selector: "#expression_form"});
					var target = $('#expression-parse-modal').find('.spinner-target')[0];
					var spinner = new Spinner(opts).spin(target);
					$(target).data('spinner', spinner);
					$('#expression-parse-modal').modal({show: true, backdrop: 'static'});
					$.get("<%= parse_progress_study_path(@study._id) %>", {file: fileName, modal_target: '#expression-parse-modal'});
				}
			});
		});

	</script>
<% end %>
<div class="modal fade" id="expression-parse-modal" tabindex="-1" role="dialog" aria-labelledby="loading-modal" aria-hidden="true">
	<%= render 'parse_modal_content' %>
</div>