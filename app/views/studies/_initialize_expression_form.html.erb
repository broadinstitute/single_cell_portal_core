<%= nested_form_for(study_file, url: update_study_file_study_path(@study._id),
                    html: {multipart: true, id: "expression_form_#{study_file._id}",
                           class: "initialize_expression_form #{study_file.new_record? ? 'new-expression-form' : nil}",
                           data: {remote: true}}) do |f| %>
	<%= render partial: 'study_file_errors', locals: {study_file: study_file} %>
  <%= f.hidden_field :study_id, value: params[:id] %>
  <%= f.hidden_field :_id, value: study_file._id %>
  <%= f.hidden_field :study_file_bundle_id %>
  <%= hidden_field_tag :selector, "#expression_form_#{study_file._id}" %>
  <%= hidden_field_tag :partial, 'initialize_expression_form' %>
  <% study_file.options.each do |key, value| %>
    <%= hidden_field_tag "study_file_options_#{key}", value, name: "study_file[options][#{key}]" %>
  <% end %>
	<div class="form-group row">
		<div class="col-sm-4">
			<%= f.label :name %><br />
			<%= f.text_field :name, class: 'form-control filename', readonly: true, placeholder: 'Filename is taken from uploaded file...', autocomplete: 'off' %>
		</div>
		<div class="col-sm-8">
			<%= f.label :description %><br />
			<%= f.text_field :description, class: 'form-control' %>
		</div>
	</div>
  <div class="form-group row">
    <div class="col-sm-4">
      <%= f.label :taxon_id, label_with_asterisk('Species') %> <%= render partial: 'taxon_help_popover', locals: {id: study_file.id.to_s} %><br />
      <%= f.select :taxon_id, options_from_collection_for_select(Taxon.sorted, :id, :display_name, study_file.taxon_id), {prompt: 'Select one...'}, {class: 'form-control'} %>
    </div>
    <div class="col-sm-8">
      <%= f.label :y_axis_label, 'Expression Axis Label' %>&nbsp;<span class="fas fa-question-circle expression-label-tooltip" data-toggle="tooltip" data-placement="right" title="This is displayed as the axis label for box & scatter plots showing expression values.  This label is global to all expression values.<%= @study.has_expression_label? ? ' Please use the study default options form to update this value.' : '' %>"></span> <br />
      <%= f.text_field :y_axis_label, value: @study.has_expression_label? ? @study.default_expression_label : study_file.y_axis_label, placeholder: @study.default_expression_label, class: 'form-control expression-label', disabled: @study.has_expression_label? %>
    </div>
  </div>
  <div class="form-group">
    <%= f.fields_for :expression_file_info %>
  </div>
	<div class="form-group row">
		<div class="col-sm-4">
      <%= f.label :file_type, 'Select a matrix file type' %><br />
      <%= f.radio_button :file_type, 'Expression Matrix', class: 'file-type' %>&nbsp;
      <%= f.label :file_type, 'Expression Matrix', value: 'Expression Matrix', class: 'radio-pad' %>
      <%= f.radio_button :file_type, 'MM Coordinate Matrix', class: 'file-type' %>
      <%= f.label :file_type, 'MM Coordinate Matrix', value: 'MM Coordinate Matrix', class: 'radio-pad' %>
    </div>
		<div class="col-sm-5 upload-field">
      <% if !study_file.upload_file_name.nil? %>
        <p><label>Link to file </label><br /><%= render partial: '/layouts/download_link', locals: {study: @study, study_file: study_file} %></p>
      <% else %>
        <%= f.label :upload, 'Upload Data File' %><br />
        <%= f.file_field :upload, class: 'btn btn-info fileinput-button', id: 'upload-expression' %>
        <%= f.hidden_field :status, value: study_file.new_record? ? 'uploading' : 'uploaded' %>
      <% end %>
    </div>
		<div class="col-sm-3">
			<%= f.label :actions %>
			<div class="row">
				<div class="col-xs-6">
					<%= f.submit 'Save', class: 'btn btn-block btn-success save-study-file', disabled: (study_file.upload_file_name.nil?) %>
				</div>
				<div class="col-xs-6">
          <% if study_file.parsing? || study_file.upload_file_name.nil? %>
            <%= link_to 'Delete', '#/', class: 'btn btn-block btn-danger disabled-delete', disabled: 'disabled', title: 'You must wait until the file has finished uploading & parsing before deleting', data: {toggle: 'tooltip'} %>
          <% else %>
            <%= link_to 'Delete', delete_study_file_study_path(@study._id, study_file._id, target: "#expression_form_#{study_file._id}"), method: :delete, class: 'btn btn-block btn-danger delete-file', data: {remote: true} %>
          <% end %>
				</div>
			</div>
		</div>

	</div>
  <p class="text-danger">* Required</p>
	<div class="form-group upload-progress">
		<table class="table table-condensed">
			<tbody class="files"></tbody>
		</table>
	</div>

  <div class="initialize-bundle-target">
    <% if study_file.study_file_bundle.present? && !study_file.study_file_bundle.completed? %>
      <%= render partial: 'study_file_bundle_btns', locals: {study_file_id: study_file.id.to_s, file_type: 'MM Coordinate Matrix'} %>
    <% end %>
  </div>

	<script type="text/javascript" nonce="<%= content_security_policy_script_nonce %>">

      var expFormId = "#expression_form_<%= study_file._id %>";
      $(expFormId).find('.file-type').on('change', function() {
        if ( $(expFormId + ' #study_file_file_type_expression_matrix').prop("checked") ) {
          $(expFormId).find('.initialize-bundle-target').empty();
        }
      });

		$(function() {

        $(expFormId).fileupload({
				url: "<%= upload_study_path(@study._id) %>",
				maxChunkSize: 10000000,
				type: 'PATCH',
				acceptFileTypes: ALLOWED_FILE_TYPES['expression'],
				add: function (e, data) {
					fileUploading = true;
					var that = this;
					var fileName = data.files[0].name.replace(/ /g, '_');
					// auto-select MM Coordinate Matrix if applicable
          fileExt = fileName.split('.').slice(-1)[0];
          if (fileExt === 'mtx') {
              $(expFormId + ' #study_file_file_type_mm_coordinate_matrix').prop("checked", true);
          }
          $(expFormId + ' .filename').val(fileName);
          var canUpload = validateCandidateUpload(expFormId, fileName, $('.initialize_expression_form .filename'));
          if ( canUpload ) {
              $.getJSON("<%= resume_upload_study_path %>", { file: fileName }, function (result) {
                  var file = result.file;
                  if (file == null) {
                      fileUploading = false;
                      $("#study-files-notice-target").html("<%= escape_javascript( render partial: 'studies/study_file_notices', locals: {message: "You have already uploaded this file.  Please select another file."}) %>");
                  } else {
                      data.uploadedBytes = file && file.size;
                      $.blueimp.fileupload.prototype.options.add.call(that, e, data);
                  }
              });
          } else {
              $(expFormId + ' .filename').val('');
          }
				},
				chunkdone: function(e, data) {
					var perc = parseInt(data.loaded / data.total * 100, 10);
					$(data.context).find('h1').html(perc + "% uploaded");
            if ( $('#<%= study_file.id %>-bundle-btns').length === 0 && $(expFormId + ' #study_file_file_type_mm_coordinate_matrix').prop("checked") ) {
                $(expFormId).find('.initialize-bundle-target').html("<%= j(render partial: 'study_file_bundle_btns', locals: {study_file_id: study_file.id.to_s, file_type: 'MM Coordinate Matrix'}) %>")
            }
				},
				done: function(e, data) {
          completeWizardStep('initialize_expression_form_nav');
					var fileName = data.files[0].name.replace(/ /g, '_');
					$.ajax({
						  url: "<%= update_status_study_path %>",
						  type: "PATCH",
              dataType: 'script',
						  data: { status: 'uploaded', file: fileName},
              success: function () {
                  fileUploading = false;
                  $.ajax({
                      url: "<%= parse_study_file_study_path(@study._id) %>",
                      type: 'POST',
                      data: {
                          file: fileName,
                          modal_target: '#expression-parse-modal',
                          partial: 'initialize_expression_form',
                          selector: expFormId
                      },
                      dataType: 'script'
                  });
              }
					});
				},
        fail: function(e, data) {
				    if (data.jqXHR != undefined) {
                if (data.jqXHR.responseJSON != undefined) {
                    alert("An error occurred while uploading this file:\n\n" + data.jqXHR.responseJSON.file.errors + "\n\nThis file will be removed once you close this dialog.");
                }
                data.jqXHR.abort();
            }
            fileUploading = false;
            console.log('Aborting upload on study_file: <%= study_file.id %>');
            launchModalSpinner('#delete-modal-spinner','#delete-modal', function() {
                $.ajax({
                    url: "<%= delete_study_file_study_path(@study._id, study_file._id, target: "#expression_form_#{study_file._id}") %>",
                    type: 'DELETE',
                    dataType: 'script'
                });
            });
        }
			});
		});

      $(expFormId).on('nested:fieldAdded', function(event){
          $('#add-expression-file-info').tooltip('destroy')
          $('#add-expression-file-info').remove()
      })

	</script>

<% end %>
