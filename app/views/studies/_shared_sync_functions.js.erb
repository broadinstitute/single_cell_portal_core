// shared JS functions for sync forms

// Used for sync CSFV
window.SCP.readOnlyTokenObject = <%= raw get_read_access_token(@study, current_user).to_json %>
window.SCP.readOnlyToken = window.SCP.readOnlyTokenObject.access_token

$('#study-file-<%= study_file.id %>').on('change', '.file-type', async function() {
    var form = $(this).closest('form');
    var fileName = form.find('.filename').val();
    var fileType = $(this).val();
    var fileId = '<%= study_file.id %>';
    var nameField = $('#study-file-<%= study_file.id %> #study_file_name');
    var extraInfo = $('#study-file-<%= study_file.id %>-extra-info');
    var taxonTarget = form.find('.taxon-select-target');
    var submitBtn = $('#sync-study-file-<%= study_file.id %>');

    $(`#sync-study-file-${fileId}`)
      .prop('disabled', null)
      .attr('data-toggle', null)
      .attr('data-original-title', null)
      .attr('data-placement', null)

    // render fields & process entries based on file type
    if (fileType === 'Cluster') {
        extraInfo.html("<%= j(render partial: 'cluster_axis_fields', locals: {study_file: study_file, f: f.dup}) %>");
        nameField.attr('readonly', false);
    } else if (fileType === 'Metadata') {
        extraInfo.html("<%= j(render partial: 'metadata_file_fields', locals: {f: f.dup}) %>");
        nameField.val(fileName);
        nameField.attr('readonly', 'readonly');
    } else if (fileType === 'Expression Matrix' || fileType === 'MM Coordinate Matrix') {
        extraInfo.html("<%= j(render partial: 'expression_file_fields', locals: {study_file: study_file, f: f.dup}) %>");
        taxonTarget.html("<%= j(render partial: 'taxon_fields', locals: {f: f.dup}) %>");
        nameField.val(fileName);
        nameField.attr('readonly', 'readonly');
    } else if (fileType === 'Gene List') {
        extraInfo.empty();
        nameField.attr('readonly', false);
    } else if (fileType === '10X Genes File' || fileType === '10X Barcodes File') {
        nameField.val(fileName);
        nameField.attr('readonly', 'readonly');
        var mtx = gatherFilesByType('MM Coordinate Matrix');
        if (mtx.length === 0) {
            alert("You must first specify at least one file of type 'MM Coordinate Matrix' (10X Genes/Barcodes Files " +
                "must pair with a matrix before being parsed).");
            $(this).val('');
        } else {
            extraInfo.html("<%= j(render partial: 'mm_coordinate_association_fields', locals: {f: f.dup}) %>");
            var matrixDropdown = $('#study-file-<%= study_file.id %> .matrix-file-select');
            appendOptionsToDropdown(mtx, matrixDropdown);
        }
        // disable sync button until user has selected a matrix pair
        console.log('disabling sync button on ' + submitBtn.attr('id'));
        submitBtn.attr('disabled', 'disabled');
    } else if (fileType === 'BAM' || fileType === 'Analysis Output' || fileType === 'Ideogram Annotations') {
        extraInfo.empty();
        taxonTarget.html("<%= j(render partial: 'taxon_fields', locals: {f: f.dup}) %>");
        assemblySelect = form.find('.genome-assembly-association');
        assemblySelect.removeClass('hidden');
    } else if (fileType === 'Fastq') {
        extraInfo.empty();
        alert('Fastq files are stored in Sequence Data Directories (see below).  Please select another file type.');
        $(this).val('');
    } else if (fileType === 'BAM Index') {
        extraInfo.empty();
        nameField.val(fileName);
        nameField.attr('readonly', 'readonly');
        var bams = gatherFilesByType('BAM');
        if (bams.length === 0) {
            alert("You must first specify at least one file of type 'BAM' (BAM Index files " +
                "must pair with a BAM before being saved).");
            $(this).val('');
        } else {
            extraInfo.html("<%= j(render partial: 'bam_association_fields', locals: {f: f.dup}) %>");
            var bamDropdown = $('#study-file-<%= study_file.id %> .bam-file-select');
            appendOptionsToDropdown(bams, bamDropdown);
        }
        // disable sync button until user has selected a BAM file
        submitBtn.attr('disabled', 'disabled');
    } else if (fileType === 'Coordinate Labels') {
        extraInfo.empty();
        nameField.val(fileName);
        nameField.attr('readonly', 'readonly');
        var clusters = gatherFilesByType('Cluster');
        if (clusters.length === 0) {
            alert("You must first specify at least one file of type 'Cluster' (Coordinate Labels files " +
                "must pair with a Cluster before being saved).");
            $(this).val('');
        } else {
            extraInfo.html("<%= j(render partial: 'coord_labels_association_fields', locals: {f: f.dup}) %>");
            var clusterDropdown = $('#study-file-<%= study_file.id %> .cluster-file-select');
            appendOptionsToDropdown(clusters, clusterDropdown);
        }
        // disable sync button until user has selected a BAM file
        submitBtn.attr('disabled', 'disabled');
    } else if (fileType === 'AnnData') {
        extraInfo.html("<%= j(render partial: 'reference_anndata_notice') %>");
    } else {
        extraInfo.empty();
        taxonTarget.empty();
        nameField.val('<%= study_file.name %>');
        nameField.attr('readonly', 'readonly');
        form.find('.taxon-select-target').empty();
    }
    // re-enable submit button if it was previously disabled
    if ( ['10X Genes File', '10X Barcodes File', 'BAM Index'].includes(fileType) ) {
        if (submitBtn.attr('disabled') === 'disabled' && $('#study-file-<%= study_file.id %> .bundle-select').val() !== '') {
            submitBtn.attr('disabled', false);
        }
    }

    // FileUploadControl updates this more elegantly via React,
    // but this direct approach is easier and as effective here.
    let useConvention = false
    if (fileType === 'Metadata') {
      const conventionSelector =
        '#study-file-<%= study_file.id %> ' +
        '#study_file_use_metadata_convention_true'
      useConvention = ($(conventionSelector)[0].checked === true)
    }
    const fileOptions = {
      use_metadata_convention: useConvention
    }

    const bucketName = '<%= @study.bucket_id %>'
    const issues = await window.SCP.validateRemoteFile(
      bucketName, fileName, fileType, fileOptions
    );

    $(form).remove('.validation-message-container')
    $(form).append('<div class="validation-message-container">')
    const studyAccession = '<%= @study.accession %>'
    const selector = `#${form.attr('id')} .validation-message-container`
    const target = document.querySelector(selector)
    window.SCP.renderComponent(target, 'ValidationMessage', {
      studyAccession: studyAccession,
      issues: issues,
      fileName: fileName,
      isSync: true})

    if (issues.errors.length > 0) {
      // Disable the "Sync" button
      $(`#sync-study-file-${fileId}`)
        .prop('disabled', true)
        .attr('data-toggle', 'tooltip')
        .attr('data-original-title', 'Fix validation errors, then refresh')
        .attr('data-placement', 'left')
    }

});

$("#sync-study-file-<%= study_file.id %>").click(function() {
    var form = $("#study-file-<%= study_file._id %>");
    var fileType = form.find('.file-type');
    if (fileType.val() == '') {
        alert('You must select a file type before saving this file.');
        fileType.parent().addClass('has-error');
        return false;
    } else {
        return true;
    }
});

// sanitize cluster names on change
$('#study-file-<%= study_file.id %>').on('change', '.filename', function() {
    validateName($(this).val(), $("#study-file-<%= study_file._id %> .filename"));
});
