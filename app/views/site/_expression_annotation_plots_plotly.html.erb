// load 2-d scatter data
var expressionData = [];
<% @values.each do |cluster, data| %>
	var expressionAnnotation = {
		x: <%= raw data[:x] %>,
		y: <%= raw data[:y] %>,
		text: <%= raw data[:text] %>,
		name: "<%= data[:name] %>",
		mode: 'markers',
		type: 'scattergl',
		hoverinfo: 'text'
	};

  expressionData.push(expressionAnnotation);
<% end %>

<%= render partial: 'expression_annotation_scatter_layout' %>

Plotly.newPlot('box-plot', expressionData, expressionLayout);

// load expression scatter plot
var exp = {
  x: <%= raw @expression[:all][:x] %>,
  y: <%= raw @expression[:all][:y] %>,
  <% if @cluster.is_3d? %>
    z: <%= raw @expression[:all][:z] %>,
  <% end %>
  text: <%= raw @expression[:all][:text] %>,
  mode: 'markers',
  type: '<%= @cluster.is_3d? ? 'scatter3d' : 'scattergl' %>',
  hoverinfo: 'text',
  marker: <%= raw @expression[:all][:marker].to_json %>
};

var clusterData = [exp];

<%= render partial: 'expression_scatter_layout' %>

Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

// listener to redraw expression scatter with new color profile
$("#colorscale").change(function() {

	var theme = $(this).val();
	exp.marker.colorscale = theme;
	console.log("setting colorscale to " + theme);
	var clusterData = [all];

	Plotly.newPlot('scatter-plot', clusterData, scatterLayout);
});

// load static cluster scatter for reference
var data = [];
var static_clst = {
  x: <%= raw @coordinates[:all][:x] %>,
  y: <%= raw @coordinates[:all][:y] %>,
  <% if @cluster.is_3d? %>
    z: <%= raw @coordinates[:all][:z] %>,
  <% end %>
  mode: 'markers',
  type: '<%= @cluster.is_3d? ? 'scatter3d' : 'scattergl' %>',
  marker: <%= raw @coordinates[:all][:marker].to_json %>
};

data.push(static_clst);

<%= render partial: 'static_scatter_layout' %>

Plotly.newPlot('reference-plot', data, staticLayout, {staticPlot: true});