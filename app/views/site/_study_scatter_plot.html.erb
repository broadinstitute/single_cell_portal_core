var data = window.SCP.cluster.plotData;

const plotHeight = window.calculatePlotViewport('#render-target')

const layout =
  getScatterPlotLayout(window.SCP.cluster.is3D, plotHeight, plotlyLabelFont)

Plotly.newPlot('cluster-plot', data, layout);

// listener to redraw expression scatter with new color profile
$('#colorscale').off('change');
$("#colorscale").change(function() {

    var theme = $(this).val();
    data[0].marker.colorscale = theme;
    console.log("setting colorscale to " + theme);

    $('#search_colorscale').val(theme);
    Plotly.update('cluster-plot', data, layout);
});

$('#cluster-figure-legend').html("<p class='text-center help-block'><%= escape_javascript(render plain: @cluster.study_file.description) %></p>");

// access actual target div, not jQuery object wrapper for relayout event
var clusterPlotDiv = document.getElementById('cluster-plot');
clusterPlotDiv.on('plotly_relayout', function(cameraData) {
  if (typeof cameraData['scene.camera'] !== 'undefined') {
    var oldScene = $('#expression-plots').data('scatter-camera');
    var newCamera = cameraData['scene.camera'];
    console.log('Updating camera information; was ' + JSON.stringify(oldScene));
    $('#cluster-plot').data('camera', newCamera);
    console.log('Update complete, camera data now ' + JSON.stringify($('#cluster-plot').data('camera')));
  }
});

