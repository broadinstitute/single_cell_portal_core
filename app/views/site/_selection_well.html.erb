<div class="row no-bottom-margin form-group" id="selection-well">
  <%= form_for(:user_annotation, url: create_user_annotations_path(accession: @study.accession, study_name: @study.url_safe_name), html: {id: 'create_annotations', method: :post, data: {remote: true}}) do |f|  %>
    <div class="col-sm-12 form-group">
      <%= f.text_field :name, class: 'form-control need-text annotation-name', placeholder: 'Name this group of labels' %>
      <%= f.hidden_field :user_id, value: current_user.id %>
      <%= f.hidden_field :cluster_group_id, value: @cluster.id %>
      <%= f.hidden_field :study_id, value: @study.id %>
      <% if !params[:subsample].blank? %>
        <%= f.hidden_field :subsample_annotation, value: params[:annotation] %>
        <%= f.hidden_field :subsample_threshold, value: params[:subsample] %>
      <% end %>
      <%= f.hidden_field :loaded_annotation, value: params[:annotation] %>
    </div>
    <div id="selection-table">
    </div>
    <div id="selection-button">
      <div class="col-xs-12 text-center">
        <%= f.button 'Create Annotations', {class:'btn btn-success', id: 'selection-submit', type: 'button'} %>
      </div>
    </div>
  <% end %>
</div>
<div id="submit_script">
  <%= render 'selection_submit' %>
</div>
<script type="text/javascript" nonce="<%= content_security_policy_script_nonce %>">

    if ($('#cluster-plot').length === 0) {
        var targetPlotString = 'scatter-plot';
    } else {
        var targetPlotString = 'cluster-plot-0';
    }

    var target = document.getElementById(targetPlotString);

    target.layout.dragmode = 'lasso';

    // change to lasso mode
    Plotly.relayout(targetPlotString, target.layout);

    var selectionWell = $('#selection-well');
    var selectionTable = $('#selection-table');
    var selectionButton = $('#selection-button');

    // array of arrays of cell names, aka selections, and of selection names
    var selections = [];
    var array_of_names = [''];

    // show the selection well and submit button
    selectionWell.css('visibility', 'visible');
    selectionButton.css('visibility', 'visible');

    // Set the initial unselected array
    var unselected_cell_name = [];

    // set initial unselected
    for (var m = 0; m < target.data.length; m++){
        unselected_cell_name.push(target.data[m].cells);
    }

    // flatten array
    unselected_cell_name = [].concat.apply([], unselected_cell_name);

    var unselected = unselected_cell_name;
    selections.push(unselected);


    // Each annotation has a "Set label" text input.  This retrieves that HTML.
    function getSetLabelInputs(rowIndex, selectionValue, text_val) {
        return (
            '<input type="text" name="user_annotation[user_data_arrays_attributes][' + rowIndex + '][name]" id="user_annotation_user_data_arrays_attributes_' + rowIndex + '_name" class="form-control annotation-label need-text" placeholder="Set Label" value="'+text_val+'">' +
            '<input name="user_annotation[user_data_arrays_attributes][' + rowIndex + '][values]" id="user_annotation_user_data_arrays_attributes_' + rowIndex + '_values" type="hidden" value="' + selectionValue + '" />'
        );
    }

    // create selection creates the first row, unselected. only called at creation of selection well
    function createSelection() {
        console.log('createSelection');
        // make sure table is empty
        selectionTable.empty();
        // add a well and table to div
        selectionTable.prepend('<div class="col-sm-12"><table id="well-table" class="table table-condensed"><tbody></tbody></table></div>');

        // add the first row, unselected
        for (var m = 0; m < selections.length; m++) {
            var name = 'Selection ' + m;
            if (m === 0) {
                name = 'Unselected';
            }
            var addS =
                '<tr>' +
                '<td id="' + name + '">'+ name + ': ' +  selections[m].length + ' Cells' +
                getSetLabelInputs(m, selections[m], '') +
                '</td>' +
                '</tr>';

            $('#well-table').prepend(addS);
        }
    }

    // add rows to the table and update all the other rows
    function updateSelection(){
        // get all the names of rows to update
        var nameArray = [];
        $('#well-table tbody tr').each(function(){
            nameArray.push(this.id);
            $(this).remove()
        });

        // iterate through the rows to update them
        for (var n = 0; n < selections.length; n++) {
            // for unselected row, when n == 0
            if (n === 0) {
                name = 'Unselected'
            } else {
                var name = 'Selection ' + parseInt(n);
            }
            var id = "Selection" + parseInt(n);

            // create delete button and listener, attach listener to update unselected
            var deleteButton = n === 0 ? '' :
                '<td class="col-sm-1" style="padding-top: 27px;">' +
                '<div class="btn btn-sm btn-danger delete-btn annotation-delete-btn" id="' + id + 'Button">' +
                '<span class="fas fa-times"></span>' +
                '</div>' +
                '</td>' ;

            var numCells = selections[n].length;
            // rowString is the string to add, that contains all the row information
            var rowString =
                '<tr id="' + id + 'Row">' +
                '<td id="' + id + '">' +
                name + ': ' + numCells + ' Cells' +
                getSetLabelInputs(n, selections[n], array_of_names[n]) +
                '</td>' +
                deleteButton
                '</tr>';

            $('#well-table').prepend(rowString);
        }
        // attach listener to make sure all annotation labels are unique
        validateUnique('#create_annotations', '.annotation-label');
    }

    // attach selection listener
    target.on('plotly_selected', function(eventData) {

        var selection =[];

        console.log(eventData);

        // get selected cells curve number and point number
        // plotly only giver x and y values per point, so we have to use point id to get annotation and cell name
        eventData.points.forEach(function (pt) {
            selection.push(target.data[pt.curveNumber].cells[pt.pointNumber]);
        });

        // update previous selections to make sure they don't include duplicate cell names
        for (var t = 0; t < selections.length; t++) {
            selections[t] = _.difference(selections[t], selection);
        }
        // add this selection to all the others
        selections.push(selection);
        // add a blank name to array of names
        array_of_names.push('');
        // remove all empty arrays from selections, and their names
        for(i=0;i<selections.length;i++){
            if(selections[i].length <1){
                selections.splice(i,1);
                array_of_names.splice(i,1);
            }
        }
        // after selection, update rows
        updateSelection();
    });


    // Event listener to remember typing names in
    $('#selection-well').on("change paste keyup",".annotation-label", function(){
        var index = parseInt(this.id.replace('user_annotation_user_data_arrays_attributes_', '').replace('_name', ''));
        array_of_names[index] = $(this).val();
    });

    // Event listener to handle deleting selected annotations
    $('#selection-well').on("click",".annotation-delete-btn", function(){
        var index = parseInt(this.id.replace('Selection', '').replace('Button', ''));
        console.log(index);
        selections[0] = selections[0].concat(selections[index]);
        selections.splice(index,1);
        updateSelection();
    });

    createSelection();
</script>
