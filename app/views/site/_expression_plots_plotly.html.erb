<%#
This code renders the "Scatter" tab plot (hidden by default) for single-gene
search in Study Overview.

See also: render_cluster.js.erb, which renders the "Distribution" tab that is
shown by default.
%>

$('#distribution-link').html('Distribution');

// If 'Distribution' panel is closed, open it
if ($('#distribution-panel-link').hasClass('collapsed')) {
  $('#distribution-panel-link').click();
}

// Make panel heading blue; accounts for possible greying by 'Annotation Scatter' view
$('#expression-options-panel').removeClass('panel-default').addClass('panel-info');

// load expression scatter plot
var exp = {
  x: <%= raw @expression[:all][:x] %>,
  y: <%= raw @expression[:all][:y] %>,
  cells: <%= raw @expression[:all][:cells] %>,
  annotations: <%= raw @expression[:all][:annotations] %>,
  <% if @cluster.is_3d? %>
    z: <%= raw @expression[:all][:z] %>,
  <% end %>
  text: <%= raw @expression[:all][:text] %>,
  mode: 'markers',
  type: '<%= @cluster.is_3d? ? 'scatter3d' : 'scattergl' %>',
  opacity: <%= @study.default_cluster_point_alpha %>,
  hoverinfo: 'text',
  marker: <%= raw @expression[:all][:marker].to_json %>
};

var clusterData = [exp];

<%= render partial: 'expression_scatter_layout' %>

Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

// load static cluster scatter for reference
var dataRef = [];
<% if @cluster.is_3d? %>
  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      z: <%= raw @coordinates[key][:z] %>,
      text: <%= raw @coordinates[key][:text] %>,
      textposition: 'bottom right',
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      type: 'scatter3d',
      opacity: <%= @study.default_cluster_point_alpha %>,
      marker: {
        color: colorBrewerSet[<%= index %> % 27],
        size: <%= raw @coordinates[key][:marker][:size] %>,
        line: {
          color: plotlyDefaultLineColor,
          width: <%= @study.show_cluster_point_borders? ? 0.5 : 0 %>
        }
      }
    };

    dataRef.push(cluster_<%= index %>_clst);
  <% end %>
<% else %>

  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      cells: <%= raw @coordinates[key][:cells] %>,
      annotations: <%= raw @coordinates[key][:annotations] %>,
      text: <%= raw @coordinates[key][:text] %>,
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      dragmode: 'lasso, select',
      type: 'scattergl',
      opacity: <%= @study.default_cluster_point_alpha %>,
      marker: {
        color: colorBrewerSet[<%= index %> % 27],
        size: <%= raw @coordinates[key][:marker][:size] %>,
        line: {
          color: plotlyDefaultLineColor,
          width: <%= @study.show_cluster_point_borders? ? 0.5 : 0 %>
        }
      }
    };

    dataRef.push(cluster_<%= index %>_clst);
  <% end %>
    $("#toggle-scatter").click(function() {
      var target = $('#scatter-plot')[0];
      $(target).on('plotly_afterplot', function() {
        if($(target).data('spinner') !== undefined){
          $(target).off('plotly_afterplot');
          $(target).data('spinner').stop();
        }
      });

      Plotly.newPlot('scatter-plot', clusterData, scatterLayout);
    });
<% end %>


<%= render partial: 'static_scatter_layout' %>

Plotly.newPlot('reference-plot', dataRef, staticLayout);

$('#cluster-figure-legend').html("<p class='text-center help-block'><%= escape_javascript(render plain: @cluster.study_file.description) %></p>");

// listener to redraw expression scatter with new color profile
// will also redraw reference plot if needed
$('#colorscale').off('change');
$("#colorscale").change(function() {

	  var theme = $(this).val();
    clusterData[0].marker.colorscale = theme;
	  console.log("setting colorscale to " + theme);
    $('#search_colorscale').val(theme);
	  Plotly.update('scatter-plot', clusterData, scatterLayout);

    // re-render reference plot if showing numeric annotations
    if (<%= @selected_annotation[:type] == 'numeric' %>) {
        dataRef[0].marker.colorscale = theme;
        Plotly.update('reference-plot', dataRef, staticLayout);
    }
});

<%= render partial: 'expression_scatter_camera' %>

// load box plot data
var expressionData = [];

<% if @values_box_type == 'box' %>
    <% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
      var cluster_<%= index %>_exp = {
        y: <%= raw data[:y] %>,
        name: "<%= data[:name] %>",
        <% if params[:boxpoints].nil? %>
            boxpoints: 'all',
        <% elsif params[:boxpoints].blank? %>
            boxpoints: false,
        <% else %>
            boxpoints: "<%= params[:boxpoints] %>",
        <% end %>
        boxmean: true,
        type: 'box',
        marker: {
          color: colorBrewerSet[<%= index %> % 27],
          line: {
            color: plotlyDefaultLineColor,
            width: <%= @study.show_cluster_point_borders? ? 0.5 : 0 %>
          }
        }
      };

      expressionData.push(cluster_<%= index %>_exp);
    <% end %>

    <%= render partial: 'expression_box_layout' %>
<% else %>
    //Using jitter_var instead of jitter because selector is called jitter, avoid confusion
    var jitter_var = "<%= @values_jitter %>";
    var expressionLabel = "<%= @y_axis_title %>";
    var formatted_array = [];
    <% @values.sort_by {|k,v| k}.each do |cluster, data| %>
      formatted_array.push(["<%= cluster %>", <%= raw data[:y] %>]);
    <% end %>
    var title = '<%= params[:cluster]%>';
    <% if @expression[:all][:x].length >= ClusterGroup::MAX_THRESHOLD %>
    title += ' (subsampled to <%= ClusterGroup::MAX_THRESHOLD %> cells)';
    <% end %>
    var data = createTracesAndLayout(formatted_array, title, jitter_var, expressionLabel);
    expressionData = [].concat.apply([], data[0] );
    expressionLayout = data[1];
<% end%>
$('#box-plot').empty();
Plotly.newPlot('box-plot', expressionData, expressionLayout);

$(document).trigger('scpPlotsDidRender');
