// load box plot data
var expressionData = [];
<% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
	var cluster_<%= index %>_exp = {
		y: <%= raw data[:y] %>,
		name: "<%= data[:name] %>",
		<% if params[:boxpoints].blank? %>
			boxpoints: 'all',
		<% else %>
			boxpoints: "<%= params[:boxpoints] %>",
		<% end %>
		boxmean: true,
		type: 'box',
		marker: {
			color: colorBrewerSet[<%= index %>],
			line:{
				color: plotlyDefaultLineColor,
				width: 0.5
			}
		}
	};

  expressionData.push(cluster_<%= index %>_exp);
<% end %>

<%= render partial: 'expression_box_layout' %>

Plotly.newPlot('box-plot', expressionData, expressionLayout);

// load expression scatter plot
var exp = {
  x: <%= raw @expression[:all][:x] %>,
  y: <%= raw @expression[:all][:y] %>,
  <% if @cluster.is_3d? %>
    z: <%= raw @expression[:all][:z] %>,
  <% end %>
  text: <%= raw @expression[:all][:text] %>,
  mode: 'markers',
  type: '<%= @cluster.is_3d? ? 'scatter3d' : 'scattergl' %>',
  hoverinfo: 'text',
  marker: <%= raw @expression[:all][:marker].to_json %>
};

var clusterData = [exp];

<%= render partial: 'expression_scatter_layout' %>

Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

// listener to redraw expression scatter with new color profile
$("#colorscale").change(function() {

	var theme = $(this).val();
	exp.marker.colorscale = theme;
	console.log("setting colorscale to " + theme);
	var clusterData = [all];

	Plotly.newPlot('scatter-plot', clusterData, scatterLayout);
});

// load static cluster scatter for reference
var data = [];
<% if @cluster.is_3d? %>
  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      z: <%= raw @coordinates[key][:z] %>,
      text: <%= raw @coordinates[key][:text] %>,
      textposition: 'bottom right',
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      type: 'scatter3d',
      marker: {
        color: colorBrewerSet[<%= index %>],
        size: <%= raw @coordinates[key][:marker_size] %>,
        line:{
          color: plotlyDefaultLineColor,
          width: 0.5
        }
      }
    };

    data.push(cluster_<%= index %>_clst);
  <% end %>
<% else %>
  <% @coordinates.each_key.sort.each_with_index do |key, index| %>
    var cluster_<%= index %>_clst = {
      x: <%= raw @coordinates[key][:x] %>,
      y: <%= raw @coordinates[key][:y] %>,
      name: "<%= @coordinates[key][:name] %>",
      mode: 'markers',
      type: 'scattergl',
      marker: {
        color: colorBrewerSet[<%= index %>],
        line:{
          color: plotlyDefaultLineColor,
          width: 0.5
        }
      }
    };

    data.push(cluster_<%= index %>_clst);
  <% end %>
<% end %>


<%= render partial: 'static_scatter_layout' %>
<% if @cluster.is_3d? %>
  Plotly.newPlot('reference-plot', data, staticLayout);
<% else %>
  Plotly.newPlot('reference-plot', data, staticLayout, {staticPlot: true});
<% end %>