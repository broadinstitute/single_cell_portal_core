// load box plot data
<% @values.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
	var cluster_<%= index %>_exp = {
		y: <%= raw data[:y] %>,
		name: "<%= data[:name] %>",
		<% if params[:boxpoints].blank? %>
			boxpoints: false,
		<% else %>
			boxpoints: "<%= params[:boxpoints] %>",
		<% end %>
		boxmean: true,
		type: 'box',
		marker: {
			color: colorBrewerSet[<%= index %>],
			line:{
				color: plotlyDefaultLineColor,
				width: 0.5
			}
		}
	};
<% end %>

var expressionData = [];
<% @clusters.each_with_index do |cluster, index| %>
	expressionData.push(cluster_<%= index %>_exp);
<% end %>

<% if params[:cluster] %>
	<%= render 'new_box_color_vals' %>
<% end %>

<%= render partial: 'expression_box_layout' %>

Plotly.newPlot('box-plot', expressionData, expressionLayout);

// load expression scatter plot
<% @expression.sort_by {|k,v| k}.each do |cluster, data| %>
	var <%= cluster %> = {
		x: <%= raw data[:x] %>,
		y: <%= raw data[:y] %>,
		text: <%= raw data[:text] %>,
		name: "<%= data[:name] %>",
		mode: 'markers',
		type: 'scatter',
		hoverinfo: 'text',
		marker: <%= raw data[:marker].to_json %>
	};
<% end %>

var clusterData = [all];

<%= render partial: 'expression_scatter_layout' %>

Plotly.newPlot('scatter-plot', clusterData, scatterLayout);

// listener to redraw expression scatter with new color profile
$("#colorscale").change(function() {

	var theme = $(this).val();
	all.marker.colorscale = theme;
	console.log("setting colorscale to " + theme);
	var clusterData = [all];

	Plotly.newPlot('scatter-plot', clusterData, scatterLayout);
});

// load static cluster scatter for reference
<% @coordinates.sort_by {|k,v| k}.each_with_index do |(cluster, data), index| %>
	var cluster_<%= index %>_clst = {
		x: <%= raw data[:x] %>,
		y: <%= raw data[:y] %>,
		text: <%= raw data[:text] %>,
		name: "<%= data[:name] %>",
		mode: 'markers',
		type: 'scatter',
		marker: {
			color: colorBrewerSet[<%= index %>],
			line:{
				color: plotlyDefaultLineColor,
				width: 0.5
			}
		}
	};
<% end %>

var data = [];
<% @clusters.each_with_index do |cluster, index| %>
	data.push(cluster_<%= index %>_clst);
<% end %>

<% if params[:cluster] %>
	<%= render 'new_scatter_color_vals' %>
<% end %>

<%= render partial: 'static_scatter_layout' %>

Plotly.newPlot('reference-plot', data, staticLayout, {staticPlot: true});

// re-render expression plots on window resize to use available area
$( window ).on('resizeEnd', function() {

	<%= render partial: 'expression_box_layout' %>

	<%= render partial: 'expression_scatter_layout' %>

	<%= render partial: 'static_scatter_layout' %>

	Plotly.newPlot('box-plot', expressionData, expressionLayout);
	Plotly.newPlot('scatter-plot', clusterData, scatterLayout);
	Plotly.newPlot('reference-plot', data, staticLayout, {staticPlot: true});
});