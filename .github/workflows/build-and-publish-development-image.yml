name: Build and publish development Docker image
on:
  push:
    branches:
      - jb-github-actions-cd
env:
  DOCKER_IMAGE_NAME: "gcr.io/broad-singlecellportal-staging/single-cell-portal"
  GCLOUD_DOCKER_IMAGE: "gcr.io/google.com/cloudsdktool/google-cloud-cli:latest"
  VAULT_SECRET_PATH: "secret/kdux/scp/staging/scp_service_account.json"
  SERVICE_ACCOUNT_PATH: "/tmp/scp_service_account.json"

jobs:
  Build-And-Publish-Development-Image:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install vault
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get -y install curl unzip jq
          sudo curl -O https://releases.hashicorp.com/vault/1.9.0/vault_1.9.0_linux_amd64.zip
          sudo unzip vault_1.9.0_linux_amd64.zip
          sudo mv vault /usr/local/bin
      - name: Download gcloud Docker image
        shell: bash
        run: |
          docker pull $GCLOUD_DOCKER_IMAGE
      - name: Authenticate to gcloud
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
        shell: bash
        run: |
          # this will create a Docker volume called 'gcloud-config' that contains credentials for use with gcloud
          export VAULT_TOKEN=$( vault write -field=token auth/approle/login role_id=$VAULT_ROLE_ID secret_id=$VAULT_SECRET_ID )
          vault read -format=json $VAULT_SECRET_PATH | jq .data > $SERVICE_ACCOUNT_PATH
          docker run -v "$SERVICE_ACCOUNT_PATH:$SERVICE_ACCOUNT_PATH" -it --name gcloud-config $GCLOUD_DOCKER_IMAGE gcloud \
                 auth activate-service-account --key-file=$SERVICE_ACCOUNT_PATH
      - name: Build development image
        env:
          VERSION_TAG: github-action-test
        run: |
          # substitutes 'docker run ARGS gcloud' for regular gcloud command
          bin/build_image.sh -v $VERSION_TAG -g "docker run --rm --volumes-from gcloud-config $GCLOUD_DOCKER_IMAGE gcloud"
